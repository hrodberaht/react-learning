// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LogIn /> should component render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogIn
    handleLogIn={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="login"
>
          Login:
          <input
                    id="login"
                    onChange={[Function]}
                    type="text"
                    value=""
          />
</label>,
        <label
          htmlFor="email"
>
          Email:
          <input
                    id="email"
                    onChange={[Function]}
                    type="email"
                    value=""
          />
</label>,
        <button
          type="submit"
>
          Log In
</button>,
      ],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Login:",
            <input
              id="login"
              onChange={[Function]}
              type="text"
              value=""
/>,
          ],
          "htmlFor": "login",
        },
        "ref": null,
        "rendered": Array [
          "Login:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "id": "login",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Email:",
            <input
              id="email"
              onChange={[Function]}
              type="email"
              value=""
/>,
          ],
          "htmlFor": "email",
        },
        "ref": null,
        "rendered": Array [
          "Email:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "id": "email",
              "onChange": [Function],
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Log In",
          "type": "submit",
        },
        "ref": null,
        "rendered": "Log In",
        "type": "button",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="login"
>
            Login:
            <input
                        id="login"
                        onChange={[Function]}
                        type="text"
                        value=""
            />
</label>,
          <label
            htmlFor="email"
>
            Email:
            <input
                        id="email"
                        onChange={[Function]}
                        type="email"
                        value=""
            />
</label>,
          <button
            type="submit"
>
            Log In
</button>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Login:",
              <input
                id="login"
                onChange={[Function]}
                type="text"
                value=""
/>,
            ],
            "htmlFor": "login",
          },
          "ref": null,
          "rendered": Array [
            "Login:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "login",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Email:",
              <input
                id="email"
                onChange={[Function]}
                type="email"
                value=""
/>,
            ],
            "htmlFor": "email",
          },
          "ref": null,
          "rendered": Array [
            "Email:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "email",
                "onChange": [Function],
                "type": "email",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Log In",
            "type": "submit",
          },
          "ref": null,
          "rendered": "Log In",
          "type": "button",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
