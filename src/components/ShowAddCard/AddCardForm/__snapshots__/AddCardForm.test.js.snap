// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ShowAddCard /> should render without crash 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddCardForm
    handleAddCard={[Function]}
    isAddCardVisible={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="name"
>
          Name:
          <input
                    id="name"
                    onChange={[Function]}
                    type="text"
                    value=""
          />
</label>,
        <label
          htmlFor="email"
>
          Email:
          <input
                    id="email"
                    onChange={[Function]}
                    type="email"
                    value=""
          />
</label>,
        <button
          disabled={true}
          onClick={[Function]}
          type="button"
>
          Add
</button>,
      ],
      "className": "AddCard",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Name:",
            <input
              id="name"
              onChange={[Function]}
              type="text"
              value=""
/>,
          ],
          "htmlFor": "name",
        },
        "ref": null,
        "rendered": Array [
          "Name:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "id": "name",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Email:",
            <input
              id="email"
              onChange={[Function]}
              type="email"
              value=""
/>,
          ],
          "htmlFor": "email",
        },
        "ref": null,
        "rendered": Array [
          "Email:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "id": "email",
              "onChange": [Function],
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add",
          "disabled": true,
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": "Add",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="name"
>
            Name:
            <input
                        id="name"
                        onChange={[Function]}
                        type="text"
                        value=""
            />
</label>,
          <label
            htmlFor="email"
>
            Email:
            <input
                        id="email"
                        onChange={[Function]}
                        type="email"
                        value=""
            />
</label>,
          <button
            disabled={true}
            onClick={[Function]}
            type="button"
>
            Add
</button>,
        ],
        "className": "AddCard",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Name:",
              <input
                id="name"
                onChange={[Function]}
                type="text"
                value=""
/>,
            ],
            "htmlFor": "name",
          },
          "ref": null,
          "rendered": Array [
            "Name:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "name",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Email:",
              <input
                id="email"
                onChange={[Function]}
                type="email"
                value=""
/>,
            ],
            "htmlFor": "email",
          },
          "ref": null,
          "rendered": Array [
            "Email:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "email",
                "onChange": [Function],
                "type": "email",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add",
            "disabled": true,
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Add",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
