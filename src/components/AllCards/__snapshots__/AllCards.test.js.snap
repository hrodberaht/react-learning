// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AllCards /> should render component witout crash 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <AllCards
    cards={
        Array [
            Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
          ]
    }
    filterText=""
    handleClick={[Function]}
    handleFetch={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": AllCards {
      "_reactInternalFiber": FiberNode {
        "_debugID": 50,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      John
                                    </h2>
                                    <h4>
                                                      Email:
                                                      john@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      Rob
                                    </h2>
                                    <h4>
                                                      Email:
                                                      rob@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "cards": Array [
                                                  Object {
                                                    "email": "john@gmail.com",
                                                    "id": 1,
                                                    "name": "John",
                                                  },
                                                  Object {
                                                    "email": "rob@gmail.com",
                                                    "id": 2,
                                                    "name": "Rob",
                                                  },
                                                ],
                                                "filterText": "",
                                                "handleClick": [Function],
                                                "handleFetch": [Function],
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                >
                                <h2>
                                                Name:
                                                John
                                </h2>
                                <h4>
                                                Email:
                                                john@gmail.com
                                </h4>
                                <button
                                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                type="button"
                                >
                                                Delete
                                </button>
                </div>
                <div
                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                >
                                <h2>
                                                Name:
                                                Rob
                                </h2>
                                <h4>
                                                Email:
                                                rob@gmail.com
                                </h4>
                                <button
                                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                type="button"
                                >
                                                Delete
                                </button>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "cards": Array [
                                                        Object {
                                                          "email": "john@gmail.com",
                                                          "id": 1,
                                                          "name": "John",
                                                        },
                                                        Object {
                                                          "email": "rob@gmail.com",
                                                          "id": 2,
                                                          "name": "Rob",
                                                        },
                                                      ],
                                                      "filterText": "",
                                                      "handleClick": [Function],
                                                      "handleFetch": [Function],
                                                    }
                  }
/>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": Object {
            "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
            "lineNumber": 26,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 53,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
              "lineNumber": 25,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 54,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                "lineNumber": 26,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 57,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": "Name:",
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": "Name:",
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "John",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "John",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": John,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "stateNode": Name:,
                "tag": 8,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  "Name:",
                  "John",
                ],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  "Name:",
                  "John",
                ],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 55,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 30,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 59,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "Email:",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "Email:",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "john@gmail.com",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "john@gmail.com",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": john@gmail.com,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": Email:,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "Email:",
                    "john@gmail.com",
                  ],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "Email:",
                    "john@gmail.com",
                  ],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 34,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "Delete",
                    "onClick": [Function],
                    "style": Object {
                      "backgroundColor": "red",
                      "border": "1px solid red",
                      "color": "white",
                      "fontSize": "16px",
                      "padding": "5px",
                    },
                    "type": "button",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "Delete",
                    "onClick": [Function],
                    "style": Object {
                      "backgroundColor": "red",
                      "border": "1px solid red",
                      "color": "white",
                      "fontSize": "16px",
                      "padding": "5px",
                    },
                    "type": "button",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <button
                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                    type="button"
>
                    Delete
</button>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "button",
                  "updateQueue": null,
                },
                "stateNode": <h4>
                  Email:
                  john@gmail.com
</h4>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h4",
                "updateQueue": null,
              },
              "stateNode": <h2>
                Name:
                John
</h2>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "h2",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <h2>
                  Name:
                  John
</h2>,
                <h4>
                  Email:
                  john@gmail.com
</h4>,
                <button
                  onClick={[Function]}
                  style={
                                    Object {
                                                      "backgroundColor": "red",
                                                      "border": "1px solid red",
                                                      "color": "white",
                                                      "fontSize": "16px",
                                                      "padding": "5px",
                                                    }
                  }
                  type="button"
>
                  Delete
</button>,
              ],
              "style": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <h2>
                  Name:
                  John
</h2>,
                <h4>
                  Email:
                  john@gmail.com
</h4>,
                <button
                  onClick={[Function]}
                  style={
                                    Object {
                                                      "backgroundColor": "red",
                                                      "border": "1px solid red",
                                                      "color": "white",
                                                      "fontSize": "16px",
                                                      "padding": "5px",
                                                    }
                  }
                  type="button"
>
                  Delete
</button>,
              ],
              "style": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
              <h2>
                            Name:
                            John
              </h2>
              <h4>
                            Email:
                            john@gmail.com
              </h4>
              <button
                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                            type="button"
              >
                            Delete
              </button>
</div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": "1",
          "lastEffect": null,
          "memoizedProps": Object {
            "card": Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            "handleClick": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "card": Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            "handleClick": [Function],
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
              "lineNumber": 26,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 61,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                "lineNumber": 25,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "Name:",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "Name:",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Rob",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Rob",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Rob,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": Name:,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "Name:",
                    "Rob",
                  ],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "Name:",
                    "Rob",
                  ],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 63,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 30,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 67,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 68,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "rob@gmail.com",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "rob@gmail.com",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": rob@gmail.com,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Email:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email:",
                      "rob@gmail.com",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email:",
                      "rob@gmail.com",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <button
                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                      type="button"
>
                      Delete
</button>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h4",
                  "updateQueue": null,
                },
                "stateNode": <h2>
                  Name:
                  Rob
</h2>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h2",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    Rob
</h2>,
                  <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    Rob
</h2>,
                  <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                <h2>
                                Name:
                                Rob
                </h2>
                <h4>
                                Email:
                                rob@gmail.com
                </h4>
                <button
                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                type="button"
                >
                                Delete
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 1,
            "key": "2",
            "lastEffect": null,
            "memoizedProps": Object {
              "card": Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
              "handleClick": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "card": Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
              "handleClick": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Card {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "button": Object {
                "backgroundColor": "red",
                "border": "1px solid red",
                "color": "white",
                "fontSize": "16px",
                "padding": "5px",
              },
              "card": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
              "context": Object {},
              "props": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "stateNode": Card {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "button": Object {
              "backgroundColor": "red",
              "border": "1px solid red",
              "color": "white",
              "fontSize": "16px",
              "padding": "5px",
            },
            "card": Object {
              "border": "1px solid black",
              "margin": "5px auto",
              "width": "300px",
            },
            "context": Object {},
            "props": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "refs": Object {},
            "state": null,
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 1,
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "cards": Array [
            Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
          ],
          "filterText": "",
          "handleClick": [Function],
          "handleFetch": [Function],
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "cards": Array [
            Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
          ],
          "filterText": "",
          "handleClick": [Function],
          "handleFetch": [Function],
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "cards": Array [
                Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
              ],
              "filterText": "",
              "handleClick": [Function],
              "handleFetch": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      John
                                    </h2>
                                    <h4>
                                                      Email:
                                                      john@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      Rob
                                    </h2>
                                    <h4>
                                                      Email:
                                                      rob@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "cards": Array [
                                                  Object {
                                                    "email": "john@gmail.com",
                                                    "id": 1,
                                                    "name": "John",
                                                  },
                                                  Object {
                                                    "email": "rob@gmail.com",
                                                    "id": 2,
                                                    "name": "Rob",
                                                  },
                                                ],
                                                "filterText": "",
                                                "handleClick": [Function],
                                                "handleFetch": [Function],
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                >
                                <h2>
                                                Name:
                                                John
                                </h2>
                                <h4>
                                                Email:
                                                john@gmail.com
                                </h4>
                                <button
                                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                type="button"
                                >
                                                Delete
                                </button>
                </div>
                <div
                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                >
                                <h2>
                                                Name:
                                                Rob
                                </h2>
                                <h4>
                                                Email:
                                                rob@gmail.com
                                </h4>
                                <button
                                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                type="button"
                                >
                                                Delete
                                </button>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "cards": Array [
                                                        Object {
                                                          "email": "john@gmail.com",
                                                          "id": 1,
                                                          "name": "John",
                                                        },
                                                        Object {
                                                          "email": "rob@gmail.com",
                                                          "id": 2,
                                                          "name": "Rob",
                                                        },
                                                      ],
                                                      "filterText": "",
                                                      "handleClick": [Function],
                                                      "handleFetch": [Function],
                                                    }
                  }
/>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "cards": Array [
          Object {
            "email": "john@gmail.com",
            "id": 1,
            "name": "John",
          },
          Object {
            "email": "rob@gmail.com",
            "id": 2,
            "name": "Rob",
          },
        ],
        "filterText": "",
        "handleClick": [Function],
        "handleFetch": [Function],
      },
      "refs": Object {},
      "state": null,
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "cards": Array [
        Object {
          "email": "john@gmail.com",
          "id": 1,
          "name": "John",
        },
        Object {
          "email": "rob@gmail.com",
          "id": 2,
          "name": "Rob",
        },
      ],
      "filterText": "",
      "handleClick": [Function],
      "handleFetch": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": Card {
          "_reactInternalFiber": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": AllCards {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": Object {
              "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
              "lineNumber": 26,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                "lineNumber": 25,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 57,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "Name:",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "Name:",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 58,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "John",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "John",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": John,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": Name:,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "Name:",
                    "John",
                  ],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "Name:",
                    "John",
                  ],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 30,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "john@gmail.com",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "john@gmail.com",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": john@gmail.com,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Email:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email:",
                      "john@gmail.com",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email:",
                      "john@gmail.com",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <button
                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                      type="button"
>
                      Delete
</button>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <h4>
                    Email:
                    john@gmail.com
</h4>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h4",
                  "updateQueue": null,
                },
                "stateNode": <h2>
                  Name:
                  John
</h2>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h2",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    John
</h2>,
                  <h4>
                    Email:
                    john@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    John
</h2>,
                  <h4>
                    Email:
                    john@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                <h2>
                                Name:
                                John
                </h2>
                <h4>
                                Email:
                                john@gmail.com
                </h4>
                <button
                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                type="button"
                >
                                Delete
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": "1",
            "lastEffect": null,
            "memoizedProps": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": AllCards {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                "lineNumber": 26,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 25,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 65,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Name:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Name:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Rob",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Rob",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Rob,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Name:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 30,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "rob@gmail.com",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "rob@gmail.com",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": rob@gmail.com,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Email:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 64,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 34,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
>
                        Delete
</button>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <h2>
                    Name:
                    Rob
</h2>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h2",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                  <h2>
                                    Name:
                                    Rob
                  </h2>
                  <h4>
                                    Email:
                                    rob@gmail.com
                  </h4>
                  <button
                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                    type="button"
                  >
                                    Delete
                  </button>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 1,
              "key": "2",
              "lastEffect": null,
              "memoizedProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Card {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "button": Object {
                  "backgroundColor": "red",
                  "border": "1px solid red",
                  "color": "white",
                  "fontSize": "16px",
                  "padding": "5px",
                },
                "card": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
                "context": Object {},
                "props": Object {
                  "card": Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                  "handleClick": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "button": Object {
            "backgroundColor": "red",
            "border": "1px solid red",
            "color": "white",
            "fontSize": "16px",
            "padding": "5px",
          },
          "card": Object {
            "border": "1px solid black",
            "margin": "5px auto",
            "width": "300px",
          },
          "context": Object {},
          "props": Object {
            "card": Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            "handleClick": [Function],
          },
          "refs": Object {},
          "state": null,
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "card": Object {
            "email": "john@gmail.com",
            "id": 1,
            "name": "John",
          },
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": <div
            style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
            <h2>
                        Name:
                        John
            </h2>
            <h4>
                        Email:
                        john@gmail.com
            </h4>
            <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
            >
                        Delete
            </button>
</div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                Name:
                John
</h2>,
              <h4>
                Email:
                john@gmail.com
</h4>,
              <button
                onClick={[Function]}
                style={
                                Object {
                                                "backgroundColor": "red",
                                                "border": "1px solid red",
                                                "color": "white",
                                                "fontSize": "16px",
                                                "padding": "5px",
                                              }
                }
                type="button"
>
                Delete
</button>,
            ],
            "style": Object {
              "border": "1px solid black",
              "margin": "5px auto",
              "width": "300px",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <h2>
                Name:
                John
</h2>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Name:",
                  "John",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Name:",
                "John",
              ],
              "type": "h2",
            },
            Object {
              "instance": <h4>
                Email:
                john@gmail.com
</h4>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Email:",
                  "john@gmail.com",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Email:",
                "john@gmail.com",
              ],
              "type": "h4",
            },
            Object {
              "instance": <button
                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                type="button"
>
                Delete
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Delete",
                "onClick": [Function],
                "style": Object {
                  "backgroundColor": "red",
                  "border": "1px solid red",
                  "color": "white",
                  "fontSize": "16px",
                  "padding": "5px",
                },
                "type": "button",
              },
              "ref": null,
              "rendered": Array [
                "Delete",
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": Card {
          "_reactInternalFiber": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 51,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 53,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 25,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 54,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 26,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Name:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Name:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "John",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "John",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": John,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Name:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Name:",
                        "John",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Name:",
                        "John",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 55,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 30,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 59,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email:",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email:",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "john@gmail.com",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "john@gmail.com",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": john@gmail.com,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": Email:,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email:",
                          "john@gmail.com",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email:",
                          "john@gmail.com",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                          "lineNumber": 34,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <button
                          style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                          type="button"
>
                          Delete
</button>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <h4>
                        Email:
                        john@gmail.com
</h4>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h4",
                      "updateQueue": null,
                    },
                    "stateNode": <h2>
                      Name:
                      John
</h2>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h2",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        John
</h2>,
                      <h4>
                        Email:
                        john@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        John
</h2>,
                      <h4>
                        Email:
                        john@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                    <h2>
                                        Name:
                                        John
                    </h2>
                    <h4>
                                        Email:
                                        john@gmail.com
                    </h4>
                    <button
                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                        type="button"
                    >
                                        Delete
                    </button>
</div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": "1",
                "lastEffect": null,
                "memoizedProps": Object {
                  "card": Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  "handleClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "card": Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  "handleClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": [Circular],
                "stateNode": Card {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "button": Object {
                    "backgroundColor": "red",
                    "border": "1px solid red",
                    "color": "white",
                    "fontSize": "16px",
                    "padding": "5px",
                  },
                  "card": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                  "context": Object {},
                  "props": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": AllCards {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": Object {
              "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
              "lineNumber": 26,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 61,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                "lineNumber": 25,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "Name:",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "Name:",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Rob",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Rob",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Rob,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": Name:,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "Name:",
                    "Rob",
                  ],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "Name:",
                    "Rob",
                  ],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 63,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 30,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 67,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 68,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "rob@gmail.com",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "rob@gmail.com",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": rob@gmail.com,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Email:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email:",
                      "rob@gmail.com",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email:",
                      "rob@gmail.com",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <button
                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                      type="button"
>
                      Delete
</button>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h4",
                  "updateQueue": null,
                },
                "stateNode": <h2>
                  Name:
                  Rob
</h2>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h2",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    Rob
</h2>,
                  <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    Rob
</h2>,
                  <h4>
                    Email:
                    rob@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                <h2>
                                Name:
                                Rob
                </h2>
                <h4>
                                Email:
                                rob@gmail.com
                </h4>
                <button
                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                type="button"
                >
                                Delete
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 1,
            "key": "2",
            "lastEffect": null,
            "memoizedProps": Object {
              "card": Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
              "handleClick": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "card": Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
              "handleClick": [Function],
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 51,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 53,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 25,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 54,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 26,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Name:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Name:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "John",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "John",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": John,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Name:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Name:",
                        "John",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Name:",
                        "John",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 55,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 30,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 59,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email:",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email:",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "john@gmail.com",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "john@gmail.com",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": john@gmail.com,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": Email:,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email:",
                          "john@gmail.com",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email:",
                          "john@gmail.com",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                          "lineNumber": 34,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <button
                          style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                          type="button"
>
                          Delete
</button>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <h4>
                        Email:
                        john@gmail.com
</h4>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h4",
                      "updateQueue": null,
                    },
                    "stateNode": <h2>
                      Name:
                      John
</h2>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h2",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        John
</h2>,
                      <h4>
                        Email:
                        john@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        John
</h2>,
                      <h4>
                        Email:
                        john@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                    <h2>
                                        Name:
                                        John
                    </h2>
                    <h4>
                                        Email:
                                        john@gmail.com
                    </h4>
                    <button
                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                        type="button"
                    >
                                        Delete
                    </button>
</div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": "1",
                "lastEffect": null,
                "memoizedProps": Object {
                  "card": Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  "handleClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "card": Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  "handleClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": [Circular],
                "stateNode": Card {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "button": Object {
                    "backgroundColor": "red",
                    "border": "1px solid red",
                    "color": "white",
                    "fontSize": "16px",
                    "padding": "5px",
                  },
                  "card": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                  "context": Object {},
                  "props": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "cards": Array [
                                                                    Object {
                                                                      "email": "john@gmail.com",
                                                                      "id": 1,
                                                                      "name": "John",
                                                                    },
                                                                    Object {
                                                                      "email": "rob@gmail.com",
                                                                      "id": 2,
                                                                      "name": "Rob",
                                                                    },
                                                                  ],
                                                                  "filterText": "",
                                                                  "handleClick": [Function],
                                                                  "handleFetch": [Function],
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  John
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  john@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
                      <div
                                            style="border: 1px solid black; width: 300px; margin: 5px auto;"
                      >
                                            <h2>
                                                                  Name:
                                                                  Rob
                                            </h2>
                                            <h4>
                                                                  Email:
                                                                  rob@gmail.com
                                            </h4>
                                            <button
                                                                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                  type="button"
                                            >
                                                                  Delete
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": AllCards {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "button": Object {
            "backgroundColor": "red",
            "border": "1px solid red",
            "color": "white",
            "fontSize": "16px",
            "padding": "5px",
          },
          "card": Object {
            "border": "1px solid black",
            "margin": "5px auto",
            "width": "300px",
          },
          "context": Object {},
          "props": Object {
            "card": Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
            "handleClick": [Function],
          },
          "refs": Object {},
          "state": null,
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "card": Object {
            "email": "rob@gmail.com",
            "id": 2,
            "name": "Rob",
          },
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": <div
            style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
            <h2>
                        Name:
                        Rob
            </h2>
            <h4>
                        Email:
                        rob@gmail.com
            </h4>
            <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
            >
                        Delete
            </button>
</div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                Name:
                Rob
</h2>,
              <h4>
                Email:
                rob@gmail.com
</h4>,
              <button
                onClick={[Function]}
                style={
                                Object {
                                                "backgroundColor": "red",
                                                "border": "1px solid red",
                                                "color": "white",
                                                "fontSize": "16px",
                                                "padding": "5px",
                                              }
                }
                type="button"
>
                Delete
</button>,
            ],
            "style": Object {
              "border": "1px solid black",
              "margin": "5px auto",
              "width": "300px",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <h2>
                Name:
                Rob
</h2>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Name:",
                  "Rob",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Name:",
                "Rob",
              ],
              "type": "h2",
            },
            Object {
              "instance": <h4>
                Email:
                rob@gmail.com
</h4>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Email:",
                  "rob@gmail.com",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Email:",
                "rob@gmail.com",
              ],
              "type": "h4",
            },
            Object {
              "instance": <button
                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                type="button"
>
                Delete
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Delete",
                "onClick": [Function],
                "style": Object {
                  "backgroundColor": "red",
                  "border": "1px solid red",
                  "color": "white",
                  "fontSize": "16px",
                  "padding": "5px",
                },
                "type": "button",
              },
              "ref": null,
              "rendered": Array [
                "Delete",
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": AllCards {
        "_reactInternalFiber": FiberNode {
          "_debugID": 50,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                    >
                                        <h2>
                                                            Name:
                                                            John
                                        </h2>
                                        <h4>
                                                            Email:
                                                            john@gmail.com
                                        </h4>
                                        <button
                                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                            type="button"
                                        >
                                                            Delete
                                        </button>
                    </div>
                    <div
                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                    >
                                        <h2>
                                                            Name:
                                                            Rob
                                        </h2>
                                        <h4>
                                                            Email:
                                                            rob@gmail.com
                                        </h4>
                                        <button
                                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                            type="button"
                                        >
                                                            Delete
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "cards": Array [
                                                        Object {
                                                          "email": "john@gmail.com",
                                                          "id": 1,
                                                          "name": "John",
                                                        },
                                                        Object {
                                                          "email": "rob@gmail.com",
                                                          "id": 2,
                                                          "name": "Rob",
                                                        },
                                                      ],
                                                      "filterText": "",
                                                      "handleClick": [Function],
                                                      "handleFetch": [Function],
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      John
                                    </h2>
                                    <h4>
                                                      Email:
                                                      john@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      Rob
                                    </h2>
                                    <h4>
                                                      Email:
                                                      rob@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "cards": Array [
                                                              Object {
                                                                "email": "john@gmail.com",
                                                                "id": 1,
                                                                "name": "John",
                                                              },
                                                              Object {
                                                                "email": "rob@gmail.com",
                                                                "id": 2,
                                                                "name": "Rob",
                                                              },
                                                            ],
                                                            "filterText": "",
                                                            "handleClick": [Function],
                                                            "handleFetch": [Function],
                                                          }
                    }
/>,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
              "lineNumber": 26,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                "lineNumber": 25,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 57,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "Name:",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "Name:",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 58,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "John",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "John",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": John,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": Name:,
                  "tag": 8,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "Name:",
                    "John",
                  ],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "Name:",
                    "John",
                  ],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 30,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "john@gmail.com",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "john@gmail.com",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": john@gmail.com,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Email:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email:",
                      "john@gmail.com",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email:",
                      "john@gmail.com",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Delete",
                      "onClick": [Function],
                      "style": Object {
                        "backgroundColor": "red",
                        "border": "1px solid red",
                        "color": "white",
                        "fontSize": "16px",
                        "padding": "5px",
                      },
                      "type": "button",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <button
                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                      type="button"
>
                      Delete
</button>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <h4>
                    Email:
                    john@gmail.com
</h4>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h4",
                  "updateQueue": null,
                },
                "stateNode": <h2>
                  Name:
                  John
</h2>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h2",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    John
</h2>,
                  <h4>
                    Email:
                    john@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h2>
                    Name:
                    John
</h2>,
                  <h4>
                    Email:
                    john@gmail.com
</h4>,
                  <button
                    onClick={[Function]}
                    style={
                                        Object {
                                                            "backgroundColor": "red",
                                                            "border": "1px solid red",
                                                            "color": "white",
                                                            "fontSize": "16px",
                                                            "padding": "5px",
                                                          }
                    }
                    type="button"
>
                    Delete
</button>,
                ],
                "style": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                <h2>
                                Name:
                                John
                </h2>
                <h4>
                                Email:
                                john@gmail.com
                </h4>
                <button
                                style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                type="button"
                >
                                Delete
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": "1",
            "lastEffect": null,
            "memoizedProps": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                "lineNumber": 26,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 25,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 65,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Name:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Name:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Rob",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Rob",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Rob,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Name:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 30,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "rob@gmail.com",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "rob@gmail.com",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": rob@gmail.com,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Email:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 64,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 34,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
>
                        Delete
</button>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <h2>
                    Name:
                    Rob
</h2>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h2",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                  <h2>
                                    Name:
                                    Rob
                  </h2>
                  <h4>
                                    Email:
                                    rob@gmail.com
                  </h4>
                  <button
                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                    type="button"
                  >
                                    Delete
                  </button>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 1,
              "key": "2",
              "lastEffect": null,
              "memoizedProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Card {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "button": Object {
                  "backgroundColor": "red",
                  "border": "1px solid red",
                  "color": "white",
                  "fontSize": "16px",
                  "padding": "5px",
                },
                "card": Object {
                  "border": "1px solid black",
                  "margin": "5px auto",
                  "width": "300px",
                },
                "context": Object {},
                "props": Object {
                  "card": Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                  "handleClick": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "stateNode": Card {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "button": Object {
                "backgroundColor": "red",
                "border": "1px solid red",
                "color": "white",
                "fontSize": "16px",
                "padding": "5px",
              },
              "card": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
              "context": Object {},
              "props": Object {
                "card": Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                "handleClick": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "cards": Array [
              Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
            ],
            "filterText": "",
            "handleClick": [Function],
            "handleFetch": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "cards": Array [
              Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
            ],
            "filterText": "",
            "handleClick": [Function],
            "handleFetch": [Function],
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "cards": Array [
                  Object {
                    "email": "john@gmail.com",
                    "id": 1,
                    "name": "John",
                  },
                  Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                ],
                "filterText": "",
                "handleClick": [Function],
                "handleFetch": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                    >
                                        <h2>
                                                            Name:
                                                            John
                                        </h2>
                                        <h4>
                                                            Email:
                                                            john@gmail.com
                                        </h4>
                                        <button
                                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                            type="button"
                                        >
                                                            Delete
                                        </button>
                    </div>
                    <div
                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                    >
                                        <h2>
                                                            Name:
                                                            Rob
                                        </h2>
                                        <h4>
                                                            Email:
                                                            rob@gmail.com
                                        </h4>
                                        <button
                                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                            type="button"
                                        >
                                                            Delete
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "cards": Array [
                                                        Object {
                                                          "email": "john@gmail.com",
                                                          "id": 1,
                                                          "name": "John",
                                                        },
                                                        Object {
                                                          "email": "rob@gmail.com",
                                                          "id": 2,
                                                          "name": "Rob",
                                                        },
                                                      ],
                                                      "filterText": "",
                                                      "handleClick": [Function],
                                                      "handleFetch": [Function],
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      John
                                    </h2>
                                    <h4>
                                                      Email:
                                                      john@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
                  <div
                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                  >
                                    <h2>
                                                      Name:
                                                      Rob
                                    </h2>
                                    <h4>
                                                      Email:
                                                      rob@gmail.com
                                    </h4>
                                    <button
                                                      style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                      type="button"
                                    >
                                                      Delete
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "cards": Array [
                                                              Object {
                                                                "email": "john@gmail.com",
                                                                "id": 1,
                                                                "name": "John",
                                                              },
                                                              Object {
                                                                "email": "rob@gmail.com",
                                                                "id": 2,
                                                                "name": "Rob",
                                                              },
                                                            ],
                                                            "filterText": "",
                                                            "handleClick": [Function],
                                                            "handleFetch": [Function],
                                                          }
                    }
/>,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "cards": Array [
            Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
          ],
          "filterText": "",
          "handleClick": [Function],
          "handleFetch": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "cards": Array [
          Object {
            "email": "john@gmail.com",
            "id": 1,
            "name": "John",
          },
          Object {
            "email": "rob@gmail.com",
            "id": 2,
            "name": "Rob",
          },
        ],
        "filterText": "",
        "handleClick": [Function],
        "handleFetch": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": Card {
            "_reactInternalFiber": FiberNode {
              "_debugID": 51,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                "lineNumber": 26,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 25,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 57,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Name:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Name:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "John",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "John",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": John,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Name:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Name:",
                      "John",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Name:",
                      "John",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 55,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 30,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "john@gmail.com",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "john@gmail.com",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": john@gmail.com,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Email:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email:",
                        "john@gmail.com",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email:",
                        "john@gmail.com",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 34,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
>
                        Delete
</button>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <h4>
                      Email:
                      john@gmail.com
</h4>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <h2>
                    Name:
                    John
</h2>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h2",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      John
</h2>,
                    <h4>
                      Email:
                      john@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      John
</h2>,
                    <h4>
                      Email:
                      john@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                  <h2>
                                    Name:
                                    John
                  </h2>
                  <h4>
                                    Email:
                                    john@gmail.com
                  </h4>
                  <button
                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                    type="button"
                  >
                                    Delete
                  </button>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": "1",
              "lastEffect": null,
              "memoizedProps": Object {
                "card": Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                "handleClick": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "card": Object {
                  "email": "john@gmail.com",
                  "id": 1,
                  "name": "John",
                },
                "handleClick": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 52,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 50,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    John
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    john@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    Rob
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    rob@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
</div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    John
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    john@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    Rob
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    rob@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
</div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": AllCards {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                  "lineNumber": 26,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 61,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 25,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 62,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 26,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 65,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Name:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Name:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 66,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Rob",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Rob",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Rob,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Name:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Name:",
                        "Rob",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Name:",
                        "Rob",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 30,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email:",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email:",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 68,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "rob@gmail.com",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "rob@gmail.com",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": rob@gmail.com,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": Email:,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email:",
                          "rob@gmail.com",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email:",
                          "rob@gmail.com",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 64,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                          "lineNumber": 34,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Delete",
                          "onClick": [Function],
                          "style": Object {
                            "backgroundColor": "red",
                            "border": "1px solid red",
                            "color": "white",
                            "fontSize": "16px",
                            "padding": "5px",
                          },
                          "type": "button",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <button
                          style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                          type="button"
>
                          Delete
</button>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <h4>
                        Email:
                        rob@gmail.com
</h4>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h4",
                      "updateQueue": null,
                    },
                    "stateNode": <h2>
                      Name:
                      Rob
</h2>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h2",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        Rob
</h2>,
                      <h4>
                        Email:
                        rob@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h2>
                        Name:
                        Rob
</h2>,
                      <h4>
                        Email:
                        rob@gmail.com
</h4>,
                      <button
                        onClick={[Function]}
                        style={
                                                Object {
                                                                        "backgroundColor": "red",
                                                                        "border": "1px solid red",
                                                                        "color": "white",
                                                                        "fontSize": "16px",
                                                                        "padding": "5px",
                                                                      }
                        }
                        type="button"
>
                        Delete
</button>,
                    ],
                    "style": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                    <h2>
                                        Name:
                                        Rob
                    </h2>
                    <h4>
                                        Email:
                                        rob@gmail.com
                    </h4>
                    <button
                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                        type="button"
                    >
                                        Delete
                    </button>
</div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": "2",
                "lastEffect": null,
                "memoizedProps": Object {
                  "card": Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                  "handleClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "card": Object {
                    "email": "rob@gmail.com",
                    "id": 2,
                    "name": "Rob",
                  },
                  "handleClick": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 50,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    John
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    john@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    Rob
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    rob@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
</div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    John
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    john@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
                            <div
                                                        style="border: 1px solid black; width: 300px; margin: 5px auto;"
                            >
                                                        <h2>
                                                                                    Name:
                                                                                    Rob
                                                        </h2>
                                                        <h4>
                                                                                    Email:
                                                                                    rob@gmail.com
                                                        </h4>
                                                        <button
                                                                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                                    type="button"
                                                        >
                                                                                    Delete
                                                        </button>
                            </div>
</div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                                                Object {
                                                                                                "cards": Array [
                                                                                                  Object {
                                                                                                    "email": "john@gmail.com",
                                                                                                    "id": 1,
                                                                                                    "name": "John",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "email": "rob@gmail.com",
                                                                                                    "id": 2,
                                                                                                    "name": "Rob",
                                                                                                  },
                                                                                                ],
                                                                                                "filterText": "",
                                                                                                "handleClick": [Function],
                                                                                                "handleFetch": [Function],
                                                                                              }
                                }
/>,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "cards": Array [
                                                                                      Object {
                                                                                        "email": "john@gmail.com",
                                                                                        "id": 1,
                                                                                        "name": "John",
                                                                                      },
                                                                                      Object {
                                                                                        "email": "rob@gmail.com",
                                                                                        "id": 2,
                                                                                        "name": "Rob",
                                                                                      },
                                                                                    ],
                                                                                    "filterText": "",
                                                                                    "handleClick": [Function],
                                                                                    "handleFetch": [Function],
                                                                                  }
                            }
/>,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "cards": Array [
                            Object {
                              "email": "john@gmail.com",
                              "id": 1,
                              "name": "John",
                            },
                            Object {
                              "email": "rob@gmail.com",
                              "id": 2,
                              "name": "Rob",
                            },
                          ],
                          "filterText": "",
                          "handleClick": [Function],
                          "handleFetch": [Function],
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": AllCards {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Card {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "button": Object {
                    "backgroundColor": "red",
                    "border": "1px solid red",
                    "color": "white",
                    "fontSize": "16px",
                    "padding": "5px",
                  },
                  "card": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                  "context": Object {},
                  "props": Object {
                    "card": Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                    "handleClick": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "stateNode": [Circular],
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "button": Object {
              "backgroundColor": "red",
              "border": "1px solid red",
              "color": "white",
              "fontSize": "16px",
              "padding": "5px",
            },
            "card": Object {
              "border": "1px solid black",
              "margin": "5px auto",
              "width": "300px",
            },
            "context": Object {},
            "props": Object {
              "card": Object {
                "email": "john@gmail.com",
                "id": 1,
                "name": "John",
              },
              "handleClick": [Function],
            },
            "refs": Object {},
            "state": null,
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "card": Object {
              "email": "john@gmail.com",
              "id": 1,
              "name": "John",
            },
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <div
              style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
              <h2>
                            Name:
                            John
              </h2>
              <h4>
                            Email:
                            john@gmail.com
              </h4>
              <button
                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                            type="button"
              >
                            Delete
              </button>
</div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  Name:
                  John
</h2>,
                <h4>
                  Email:
                  john@gmail.com
</h4>,
                <button
                  onClick={[Function]}
                  style={
                                    Object {
                                                      "backgroundColor": "red",
                                                      "border": "1px solid red",
                                                      "color": "white",
                                                      "fontSize": "16px",
                                                      "padding": "5px",
                                                    }
                  }
                  type="button"
>
                  Delete
</button>,
              ],
              "style": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <h2>
                  Name:
                  John
</h2>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Name:",
                    "John",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Name:",
                  "John",
                ],
                "type": "h2",
              },
              Object {
                "instance": <h4>
                  Email:
                  john@gmail.com
</h4>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Email:",
                    "john@gmail.com",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Email:",
                  "john@gmail.com",
                ],
                "type": "h4",
              },
              Object {
                "instance": <button
                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                  type="button"
>
                  Delete
</button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Delete",
                  "onClick": [Function],
                  "style": Object {
                    "backgroundColor": "red",
                    "border": "1px solid red",
                    "color": "white",
                    "fontSize": "16px",
                    "padding": "5px",
                  },
                  "type": "button",
                },
                "ref": null,
                "rendered": Array [
                  "Delete",
                ],
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": Card {
            "_reactInternalFiber": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 51,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 53,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 25,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 54,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 26,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Name:",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Name:",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 58,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "John",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "John",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": John,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": Name:,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Name:",
                          "John",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Name:",
                          "John",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 55,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                          "lineNumber": 30,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Email:",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Email:",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "john@gmail.com",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "john@gmail.com",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": john@gmail.com,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": Email:,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Email:",
                            "john@gmail.com",
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Email:",
                            "john@gmail.com",
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                            "lineNumber": 34,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Delete",
                            "onClick": [Function],
                            "style": Object {
                              "backgroundColor": "red",
                              "border": "1px solid red",
                              "color": "white",
                              "fontSize": "16px",
                              "padding": "5px",
                            },
                            "type": "button",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Delete",
                            "onClick": [Function],
                            "style": Object {
                              "backgroundColor": "red",
                              "border": "1px solid red",
                              "color": "white",
                              "fontSize": "16px",
                              "padding": "5px",
                            },
                            "type": "button",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <button
                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                            type="button"
>
                            Delete
</button>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "stateNode": <h4>
                          Email:
                          john@gmail.com
</h4>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "h4",
                        "updateQueue": null,
                      },
                      "stateNode": <h2>
                        Name:
                        John
</h2>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h2",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h2>
                          Name:
                          John
</h2>,
                        <h4>
                          Email:
                          john@gmail.com
</h4>,
                        <button
                          onClick={[Function]}
                          style={
                                                    Object {
                                                                              "backgroundColor": "red",
                                                                              "border": "1px solid red",
                                                                              "color": "white",
                                                                              "fontSize": "16px",
                                                                              "padding": "5px",
                                                                            }
                          }
                          type="button"
>
                          Delete
</button>,
                      ],
                      "style": Object {
                        "border": "1px solid black",
                        "margin": "5px auto",
                        "width": "300px",
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h2>
                          Name:
                          John
</h2>,
                        <h4>
                          Email:
                          john@gmail.com
</h4>,
                        <button
                          onClick={[Function]}
                          style={
                                                    Object {
                                                                              "backgroundColor": "red",
                                                                              "border": "1px solid red",
                                                                              "color": "white",
                                                                              "fontSize": "16px",
                                                                              "padding": "5px",
                                                                            }
                          }
                          type="button"
>
                          Delete
</button>,
                      ],
                      "style": Object {
                        "border": "1px solid black",
                        "margin": "5px auto",
                        "width": "300px",
                      },
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                      <h2>
                                            Name:
                                            John
                      </h2>
                      <h4>
                                            Email:
                                            john@gmail.com
                      </h4>
                      <button
                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                            type="button"
                      >
                                            Delete
                      </button>
</div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": "1",
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": [Circular],
                  "stateNode": Card {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "button": Object {
                      "backgroundColor": "red",
                      "border": "1px solid red",
                      "color": "white",
                      "fontSize": "16px",
                      "padding": "5px",
                    },
                    "card": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                    "context": Object {},
                    "props": Object {
                      "card": Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      "handleClick": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                "lineNumber": 26,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                  "lineNumber": 25,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 65,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Name:",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Name:",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Rob",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Rob",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Rob,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": Name:,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Name:",
                      "Rob",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 30,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email:",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email:",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "rob@gmail.com",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "rob@gmail.com",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": rob@gmail.com,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode": Email:,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email:",
                        "rob@gmail.com",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 64,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 34,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Delete",
                        "onClick": [Function],
                        "style": Object {
                          "backgroundColor": "red",
                          "border": "1px solid red",
                          "color": "white",
                          "fontSize": "16px",
                          "padding": "5px",
                        },
                        "type": "button",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <button
                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                        type="button"
>
                        Delete
</button>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <h2>
                    Name:
                    Rob
</h2>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h2",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <h2>
                      Name:
                      Rob
</h2>,
                    <h4>
                      Email:
                      rob@gmail.com
</h4>,
                    <button
                      onClick={[Function]}
                      style={
                                            Object {
                                                                  "backgroundColor": "red",
                                                                  "border": "1px solid red",
                                                                  "color": "white",
                                                                  "fontSize": "16px",
                                                                  "padding": "5px",
                                                                }
                      }
                      type="button"
>
                      Delete
</button>,
                  ],
                  "style": Object {
                    "border": "1px solid black",
                    "margin": "5px auto",
                    "width": "300px",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                  <h2>
                                    Name:
                                    Rob
                  </h2>
                  <h4>
                                    Email:
                                    rob@gmail.com
                  </h4>
                  <button
                                    style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                    type="button"
                  >
                                    Delete
                  </button>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 1,
              "key": "2",
              "lastEffect": null,
              "memoizedProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "card": Object {
                  "email": "rob@gmail.com",
                  "id": 2,
                  "name": "Rob",
                },
                "handleClick": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 51,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/hrod/react-learning/src/components/AllCards/AllCards.js",
                    "lineNumber": 26,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 53,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                      "lineNumber": 25,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 54,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                        "lineNumber": 26,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Name:",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Name:",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 58,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "John",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "John",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": John,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": Name:,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Name:",
                          "John",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Name:",
                          "John",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 55,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                          "lineNumber": 30,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Email:",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Email:",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "john@gmail.com",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "john@gmail.com",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": john@gmail.com,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": Email:,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Email:",
                            "john@gmail.com",
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Email:",
                            "john@gmail.com",
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/hrod/react-learning/src/components/AllCards/Card/Card.js",
                            "lineNumber": 34,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Delete",
                            "onClick": [Function],
                            "style": Object {
                              "backgroundColor": "red",
                              "border": "1px solid red",
                              "color": "white",
                              "fontSize": "16px",
                              "padding": "5px",
                            },
                            "type": "button",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Delete",
                            "onClick": [Function],
                            "style": Object {
                              "backgroundColor": "red",
                              "border": "1px solid red",
                              "color": "white",
                              "fontSize": "16px",
                              "padding": "5px",
                            },
                            "type": "button",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <button
                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                            type="button"
>
                            Delete
</button>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "stateNode": <h4>
                          Email:
                          john@gmail.com
</h4>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "h4",
                        "updateQueue": null,
                      },
                      "stateNode": <h2>
                        Name:
                        John
</h2>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h2",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h2>
                          Name:
                          John
</h2>,
                        <h4>
                          Email:
                          john@gmail.com
</h4>,
                        <button
                          onClick={[Function]}
                          style={
                                                    Object {
                                                                              "backgroundColor": "red",
                                                                              "border": "1px solid red",
                                                                              "color": "white",
                                                                              "fontSize": "16px",
                                                                              "padding": "5px",
                                                                            }
                          }
                          type="button"
>
                          Delete
</button>,
                      ],
                      "style": Object {
                        "border": "1px solid black",
                        "margin": "5px auto",
                        "width": "300px",
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h2>
                          Name:
                          John
</h2>,
                        <h4>
                          Email:
                          john@gmail.com
</h4>,
                        <button
                          onClick={[Function]}
                          style={
                                                    Object {
                                                                              "backgroundColor": "red",
                                                                              "border": "1px solid red",
                                                                              "color": "white",
                                                                              "fontSize": "16px",
                                                                              "padding": "5px",
                                                                            }
                          }
                          type="button"
>
                          Delete
</button>,
                      ],
                      "style": Object {
                        "border": "1px solid black",
                        "margin": "5px auto",
                        "width": "300px",
                      },
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
                      <h2>
                                            Name:
                                            John
                      </h2>
                      <h4>
                                            Email:
                                            john@gmail.com
                      </h4>
                      <button
                                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                            type="button"
                      >
                                            Delete
                      </button>
</div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": "1",
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "card": Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    "handleClick": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": [Circular],
                  "stateNode": Card {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "button": Object {
                      "backgroundColor": "red",
                      "border": "1px solid red",
                      "color": "white",
                      "fontSize": "16px",
                      "padding": "5px",
                    },
                    "card": Object {
                      "border": "1px solid black",
                      "margin": "5px auto",
                      "width": "300px",
                    },
                    "context": Object {},
                    "props": Object {
                      "card": Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      "handleClick": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "cards": Array [
                    Object {
                      "email": "john@gmail.com",
                      "id": 1,
                      "name": "John",
                    },
                    Object {
                      "email": "rob@gmail.com",
                      "id": 2,
                      "name": "Rob",
                    },
                  ],
                  "filterText": "",
                  "handleClick": [Function],
                  "handleFetch": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "cards": Array [
                        Object {
                          "email": "john@gmail.com",
                          "id": 1,
                          "name": "John",
                        },
                        Object {
                          "email": "rob@gmail.com",
                          "id": 2,
                          "name": "Rob",
                        },
                      ],
                      "filterText": "",
                      "handleClick": [Function],
                      "handleFetch": [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              John
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              john@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
                          <div
                                                    style="border: 1px solid black; width: 300px; margin: 5px auto;"
                          >
                                                    <h2>
                                                                              Name:
                                                                              Rob
                                                    </h2>
                                                    <h4>
                                                                              Email:
                                                                              rob@gmail.com
                                                    </h4>
                                                    <button
                                                                              style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                              type="button"
                                                    >
                                                                              Delete
                                                    </button>
                          </div>
</div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                                            Object {
                                                                                          "cards": Array [
                                                                                            Object {
                                                                                              "email": "john@gmail.com",
                                                                                              "id": 1,
                                                                                              "name": "John",
                                                                                            },
                                                                                            Object {
                                                                                              "email": "rob@gmail.com",
                                                                                              "id": 2,
                                                                                              "name": "Rob",
                                                                                            },
                                                                                          ],
                                                                                          "filterText": "",
                                                                                          "handleClick": [Function],
                                                                                          "handleFetch": [Function],
                                                                                        }
                              }
/>,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "cards": Array [
                                                                          Object {
                                                                            "email": "john@gmail.com",
                                                                            "id": 1,
                                                                            "name": "John",
                                                                          },
                                                                          Object {
                                                                            "email": "rob@gmail.com",
                                                                            "id": 2,
                                                                            "name": "Rob",
                                                                          },
                                                                        ],
                                                                        "filterText": "",
                                                                        "handleClick": [Function],
                                                                        "handleFetch": [Function],
                                                                      }
                        }
/>,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        John
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        john@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
                        <div
                                                style="border: 1px solid black; width: 300px; margin: 5px auto;"
                        >
                                                <h2>
                                                                        Name:
                                                                        Rob
                                                </h2>
                                                <h4>
                                                                        Email:
                                                                        rob@gmail.com
                                                </h4>
                                                <button
                                                                        style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                                                                        type="button"
                                                >
                                                                        Delete
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "cards": Array [
                                                                                Object {
                                                                                  "email": "john@gmail.com",
                                                                                  "id": 1,
                                                                                  "name": "John",
                                                                                },
                                                                                Object {
                                                                                  "email": "rob@gmail.com",
                                                                                  "id": 2,
                                                                                  "name": "Rob",
                                                                                },
                                                                              ],
                                                                              "filterText": "",
                                                                              "handleClick": [Function],
                                                                              "handleFetch": [Function],
                                                                            }
                          }
/>,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "cards": Array [
                          Object {
                            "email": "john@gmail.com",
                            "id": 1,
                            "name": "John",
                          },
                          Object {
                            "email": "rob@gmail.com",
                            "id": 2,
                            "name": "Rob",
                          },
                        ],
                        "filterText": "",
                        "handleClick": [Function],
                        "handleFetch": [Function],
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": AllCards {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "cards": Array [
                      Object {
                        "email": "john@gmail.com",
                        "id": 1,
                        "name": "John",
                      },
                      Object {
                        "email": "rob@gmail.com",
                        "id": 2,
                        "name": "Rob",
                      },
                    ],
                    "filterText": "",
                    "handleClick": [Function],
                    "handleFetch": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": [Circular],
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "button": Object {
              "backgroundColor": "red",
              "border": "1px solid red",
              "color": "white",
              "fontSize": "16px",
              "padding": "5px",
            },
            "card": Object {
              "border": "1px solid black",
              "margin": "5px auto",
              "width": "300px",
            },
            "context": Object {},
            "props": Object {
              "card": Object {
                "email": "rob@gmail.com",
                "id": 2,
                "name": "Rob",
              },
              "handleClick": [Function],
            },
            "refs": Object {},
            "state": null,
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "card": Object {
              "email": "rob@gmail.com",
              "id": 2,
              "name": "Rob",
            },
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <div
              style="border: 1px solid black; width: 300px; margin: 5px auto;"
>
              <h2>
                            Name:
                            Rob
              </h2>
              <h4>
                            Email:
                            rob@gmail.com
              </h4>
              <button
                            style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                            type="button"
              >
                            Delete
              </button>
</div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  Name:
                  Rob
</h2>,
                <h4>
                  Email:
                  rob@gmail.com
</h4>,
                <button
                  onClick={[Function]}
                  style={
                                    Object {
                                                      "backgroundColor": "red",
                                                      "border": "1px solid red",
                                                      "color": "white",
                                                      "fontSize": "16px",
                                                      "padding": "5px",
                                                    }
                  }
                  type="button"
>
                  Delete
</button>,
              ],
              "style": Object {
                "border": "1px solid black",
                "margin": "5px auto",
                "width": "300px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <h2>
                  Name:
                  Rob
</h2>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Name:",
                    "Rob",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Name:",
                  "Rob",
                ],
                "type": "h2",
              },
              Object {
                "instance": <h4>
                  Email:
                  rob@gmail.com
</h4>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Email:",
                    "rob@gmail.com",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Email:",
                  "rob@gmail.com",
                ],
                "type": "h4",
              },
              Object {
                "instance": <button
                  style="color: white; border: 1px solid red; font-size: 16px; background-color: red; padding: 5px;"
                  type="button"
>
                  Delete
</button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Delete",
                  "onClick": [Function],
                  "style": Object {
                    "backgroundColor": "red",
                    "border": "1px solid red",
                    "color": "white",
                    "fontSize": "16px",
                    "padding": "5px",
                  },
                  "type": "button",
                },
                "ref": null,
                "rendered": Array [
                  "Delete",
                ],
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
